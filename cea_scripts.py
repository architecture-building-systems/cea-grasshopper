def archetypes_mapper(kwargs):
    """NOTE: this whole file is autogenerated"""
    if kwargs["start"]:
        import cea_runner    
        cea_runner.run("archetypes-mapper", {k:v for k, v in kwargs.items() if k != "start"})
    return kwargs["start"]


def weather_helper(kwargs):
    """NOTE: this whole file is autogenerated"""
    if kwargs["start"]:
        import cea_runner    
        cea_runner.run("weather-helper", {k:v for k, v in kwargs.items() if k != "start"})
    return kwargs["start"]


def surroundings_helper(kwargs):
    """NOTE: this whole file is autogenerated"""
    if kwargs["start"]:
        import cea_runner    
        cea_runner.run("surroundings-helper", {k:v for k, v in kwargs.items() if k != "start"})
    return kwargs["start"]


def terrain_helper(kwargs):
    """NOTE: this whole file is autogenerated"""
    if kwargs["start"]:
        import cea_runner    
        cea_runner.run("terrain-helper", {k:v for k, v in kwargs.items() if k != "start"})
    return kwargs["start"]


def streets_helper(kwargs):
    """NOTE: this whole file is autogenerated"""
    if kwargs["start"]:
        import cea_runner    
        cea_runner.run("streets-helper", {k:v for k, v in kwargs.items() if k != "start"})
    return kwargs["start"]


def radiation(kwargs):
    """NOTE: this whole file is autogenerated"""
    if kwargs["start"]:
        import cea_runner    
        cea_runner.run("radiation", {k:v for k, v in kwargs.items() if k != "start"})
    return kwargs["start"]


def schedule_maker(kwargs):
    """NOTE: this whole file is autogenerated"""
    if kwargs["start"]:
        import cea_runner    
        cea_runner.run("schedule-maker", {k:v for k, v in kwargs.items() if k != "start"})
    return kwargs["start"]


def demand(kwargs):
    """NOTE: this whole file is autogenerated"""
    if kwargs["start"]:
        import cea_runner    
        cea_runner.run("demand", {k:v for k, v in kwargs.items() if k != "start"})
    return kwargs["start"]


def emissions(kwargs):
    """NOTE: this whole file is autogenerated"""
    if kwargs["start"]:
        import cea_runner    
        cea_runner.run("emissions", {k:v for k, v in kwargs.items() if k != "start"})
    return kwargs["start"]


def system_costs(kwargs):
    """NOTE: this whole file is autogenerated"""
    if kwargs["start"]:
        import cea_runner    
        cea_runner.run("system-costs", {k:v for k, v in kwargs.items() if k != "start"})
    return kwargs["start"]


def shallow_geothermal_potential(kwargs):
    """NOTE: this whole file is autogenerated"""
    if kwargs["start"]:
        import cea_runner    
        cea_runner.run("shallow-geothermal-potential", {k:v for k, v in kwargs.items() if k != "start"})
    return kwargs["start"]


def water_body_potential(kwargs):
    """NOTE: this whole file is autogenerated"""
    if kwargs["start"]:
        import cea_runner    
        cea_runner.run("water-body-potential", {k:v for k, v in kwargs.items() if k != "start"})
    return kwargs["start"]


def photovoltaic_thermal(kwargs):
    """NOTE: this whole file is autogenerated"""
    if kwargs["start"]:
        import cea_runner    
        cea_runner.run("photovoltaic-thermal", {k:v for k, v in kwargs.items() if k != "start"})
    return kwargs["start"]


def photovoltaic(kwargs):
    """NOTE: this whole file is autogenerated"""
    if kwargs["start"]:
        import cea_runner    
        cea_runner.run("photovoltaic", {k:v for k, v in kwargs.items() if k != "start"})
    return kwargs["start"]


def sewage_potential(kwargs):
    """NOTE: this whole file is autogenerated"""
    if kwargs["start"]:
        import cea_runner    
        cea_runner.run("sewage-potential", {k:v for k, v in kwargs.items() if k != "start"})
    return kwargs["start"]


def solar_collector(kwargs):
    """NOTE: this whole file is autogenerated"""
    if kwargs["start"]:
        import cea_runner    
        cea_runner.run("solar-collector", {k:v for k, v in kwargs.items() if k != "start"})
    return kwargs["start"]


def network_layout(kwargs):
    """NOTE: this whole file is autogenerated"""
    if kwargs["start"]:
        import cea_runner    
        cea_runner.run("network-layout", {k:v for k, v in kwargs.items() if k != "start"})
    return kwargs["start"]


def thermal_network(kwargs):
    """NOTE: this whole file is autogenerated"""
    if kwargs["start"]:
        import cea_runner    
        cea_runner.run("thermal-network", {k:v for k, v in kwargs.items() if k != "start"})
    return kwargs["start"]


def thermal_network_optimization(kwargs):
    """NOTE: this whole file is autogenerated"""
    if kwargs["start"]:
        import cea_runner    
        cea_runner.run("thermal-network-optimization", {k:v for k, v in kwargs.items() if k != "start"})
    return kwargs["start"]


def decentralized(kwargs):
    """NOTE: this whole file is autogenerated"""
    if kwargs["start"]:
        import cea_runner    
        cea_runner.run("decentralized", {k:v for k, v in kwargs.items() if k != "start"})
    return kwargs["start"]


def optimization(kwargs):
    """NOTE: this whole file is autogenerated"""
    if kwargs["start"]:
        import cea_runner    
        cea_runner.run("optimization", {k:v for k, v in kwargs.items() if k != "start"})
    return kwargs["start"]


def dbf_to_excel_to_dbf(kwargs):
    """NOTE: this whole file is autogenerated"""
    if kwargs["start"]:
        import cea_runner    
        cea_runner.run("dbf-to-excel-to-dbf", {k:v for k, v in kwargs.items() if k != "start"})
    return kwargs["start"]


def data_initializer(kwargs):
    """NOTE: this whole file is autogenerated"""
    if kwargs["start"]:
        import cea_runner    
        cea_runner.run("data-initializer", {k:v for k, v in kwargs.items() if k != "start"})
    return kwargs["start"]


def database_migrator(kwargs):
    """NOTE: this whole file is autogenerated"""
    if kwargs["start"]:
        import cea_runner    
        cea_runner.run("database-migrator", {k:v for k, v in kwargs.items() if k != "start"})
    return kwargs["start"]


def create_new_scenario(kwargs):
    """NOTE: this whole file is autogenerated"""
    if kwargs["start"]:
        import cea_runner    
        cea_runner.run("create-new-scenario", {k:v for k, v in kwargs.items() if k != "start"})
    return kwargs["start"]


def rename_building(kwargs):
    """NOTE: this whole file is autogenerated"""
    if kwargs["start"]:
        import cea_runner    
        cea_runner.run("rename-building", {k:v for k, v in kwargs.items() if k != "start"})
    return kwargs["start"]


def create_mixed_use_type(kwargs):
    """NOTE: this whole file is autogenerated"""
    if kwargs["start"]:
        import cea_runner    
        cea_runner.run("create-mixed-use-type", {k:v for k, v in kwargs.items() if k != "start"})
    return kwargs["start"]


def test(kwargs):
    """NOTE: this whole file is autogenerated"""
    if kwargs["start"]:
        import cea_runner    
        cea_runner.run("test", {k:v for k, v in kwargs.items() if k != "start"})
    return kwargs["start"]


def run_unit_tests(kwargs):
    """NOTE: this whole file is autogenerated"""
    if kwargs["start"]:
        import cea_runner    
        cea_runner.run("run-unit-tests", {k:v for k, v in kwargs.items() if k != "start"})
    return kwargs["start"]


def run_all_plots(kwargs):
    """NOTE: this whole file is autogenerated"""
    if kwargs["start"]:
        import cea_runner    
        cea_runner.run("run-all-plots", {k:v for k, v in kwargs.items() if k != "start"})
    return kwargs["start"]


def multi_criteria_analysis(kwargs):
    """NOTE: this whole file is autogenerated"""
    if kwargs["start"]:
        import cea_runner    
        cea_runner.run("multi-criteria-analysis", {k:v for k, v in kwargs.items() if k != "start"})
    return kwargs["start"]


def zone_helper(kwargs):
    """NOTE: this whole file is autogenerated"""
    if kwargs["start"]:
        import cea_runner    
        cea_runner.run("zone-helper", {k:v for k, v in kwargs.items() if k != "start"})
    return kwargs["start"]


def create_polygon(kwargs):
    """NOTE: this whole file is autogenerated"""
    if kwargs["start"]:
        import cea_runner    
        cea_runner.run("create-polygon", {k:v for k, v in kwargs.items() if k != "start"})
    return kwargs["start"]


def compile(kwargs):
    """NOTE: this whole file is autogenerated"""
    if kwargs["start"]:
        import cea_runner    
        cea_runner.run("compile", {k:v for k, v in kwargs.items() if k != "start"})
    return kwargs["start"]


def dashboard(kwargs):
    """NOTE: this whole file is autogenerated"""
    if kwargs["start"]:
        import cea_runner    
        cea_runner.run("dashboard", {k:v for k, v in kwargs.items() if k != "start"})
    return kwargs["start"]


def excel_to_shapefile(kwargs):
    """NOTE: this whole file is autogenerated"""
    if kwargs["start"]:
        import cea_runner    
        cea_runner.run("excel-to-shapefile", {k:v for k, v in kwargs.items() if k != "start"})
    return kwargs["start"]


def extract_reference_case(kwargs):
    """NOTE: this whole file is autogenerated"""
    if kwargs["start"]:
        import cea_runner    
        cea_runner.run("extract-reference-case", {k:v for k, v in kwargs.items() if k != "start"})
    return kwargs["start"]


def list_demand_graphs_fields(kwargs):
    """NOTE: this whole file is autogenerated"""
    if kwargs["start"]:
        import cea_runner    
        cea_runner.run("list-demand-graphs-fields", {k:v for k, v in kwargs.items() if k != "start"})
    return kwargs["start"]


def shapefile_to_excel(kwargs):
    """NOTE: this whole file is autogenerated"""
    if kwargs["start"]:
        import cea_runner    
        cea_runner.run("shapefile-to-excel", {k:v for k, v in kwargs.items() if k != "start"})
    return kwargs["start"]


def trace_inputlocator(kwargs):
    """NOTE: this whole file is autogenerated"""
    if kwargs["start"]:
        import cea_runner    
        cea_runner.run("trace-inputlocator", {k:v for k, v in kwargs.items() if k != "start"})
    return kwargs["start"]


def workflow(kwargs):
    """NOTE: this whole file is autogenerated"""
    if kwargs["start"]:
        import cea_runner    
        cea_runner.run("workflow", {k:v for k, v in kwargs.items() if k != "start"})
    return kwargs["start"]

